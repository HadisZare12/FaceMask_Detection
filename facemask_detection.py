# -*- coding: utf-8 -*-
"""FaceMask_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hnPfPYXNxUf7O7vRQF0JRRcdxp2mqDHD
"""

pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d omkargurav/face-mask-dataset

# extracting the compessed Dataset
from zipfile import ZipFile
dataset = '/content/face-mask-dataset.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

#importing the Dependencies
import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mping
import cv2 #image processing
from google.colab.patches import cv2_imshow
from PIL import Image
from sklearn.model_selection import train_test_split

with_mask_files = os.listdir('/content/data/with_mask')
print(with_mask_files[0:5])
print(with_mask_files[-5:])

len(with_mask_files)

without_mask_files = os.listdir('/content/data/without_mask')
print(without_mask_files[0:5])
print(without_mask_files[-5:])

len(without_mask_files)

print('Num of the Mask Images:', len(with_mask_files))
print('Num of the without Mask Images:', len(without_mask_files))

#create the label for the two class of images
#with mask --> 1
#without mask --> 0
with_mask_labels = [1]*3725
without_mask_labels = [0]*3828
print(with_mask_labels[0:5])
print(without_mask_labels[0:5])

labels = with_mask_labels + without_mask_labels
print(len(labels))

#Display images
img = mping.imread('/content/data/with_mask/with_mask_3418.jpg')
imgplot = plt.imshow(img)
plt.show()

img = mping.imread('/content/data/without_mask/without_mask_2799.jpg')
imgplot = plt.imshow(img)
plt.show()

#image processing

with_mask_path = '/content/data/with_mask/'
data=[]
for img_file in with_mask_files:
  image = Image.open(with_mask_path + img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

  without_mask_path = '/content/data/without_mask/'

for img_file in without_mask_files:
  image = Image.open(without_mask_path + img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

len(data)

data[0]

X = np.array(data)
Y = np.array(labels)

#train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

#scale the data
X_train_scaled = X_train/255
X_test_scaled = X_test/255

#cnn
import tensorflow as tf
from tensorflow import keras

num_of_classes = 2 #with_mask and without_mask

model = keras.Sequential()
model.add(keras.layers.Conv2D(32, kernel_size=(3,3),activation='relu',input_shape=(128,128,3)))
model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))

model.add(keras.layers.Conv2D(64, kernel_size=(3,3), activation='relu'))
model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))

model.add(keras.layers.Flatten())

model.add(keras.layers.Dense(128, activation='relu'))
model.add(keras.layers.Dropout(0.5)) #reduce the risk of overfitting

model.add(keras.layers.Dense(64, activation='relu'))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(num_of_classes, activation='sigmoid'))

#compile the nn
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',
              metrics=['acc'])

#train the model
train_model = model.fit(X_train_scaled,Y_train, validation_split=0.1,epochs=5)

#Evaluation
loss, accuracy = model.evaluate(X_test_scaled, Y_test)
print('Test Accuracy =', accuracy)

T = train_model
#plot the loss value
plt.plot(T.history['loss'],label='train_loss')
plt.plot(T.history['val_loss'],label='validation_loss')
plt.legend()
plt.show()

#plot the accuracy value
plt.plot(T.history['acc'],label='train_acc')
plt.plot(T.history['val_acc'],label='validation_acc')
plt.legend()
plt.show()

#predictive system

input_image_path = input('Path of the image:')
input_image = cv2.imread(input_image_path)
cv2_imshow(input_image)
input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 1:

  print('The person in the image is wearing a mask')

else:

  print('The person in the image is not wearing a mask')

#predictive system

input_image_path = input('Path of the image:')
input_image = cv2.imread(input_image_path)
cv2_imshow(input_image)
input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 1:

  print('The person in the image is wearing a mask')

else:

  print('The person in the image is not wearing a mask')

#because the lack of the Information the model predict not really well, we need better and larger dataset